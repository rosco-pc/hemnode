[{"id":"f887dac4.5b405","type":"function","z":"4b9502df.05cf0c","name":"Process controls","func":"// Constants\nconst debug=true\nconst Actions = ['Off', 'On', 'Random']\nconst Days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nconst selected = ['Device', 'Day','Sun ON event','Sun OFF event'];\nconst sunevents = [\"\",\"nauticalDawn\",\"dawn\",\"nadir\",\"sunrise\",\"sunriseEnd\",\n                   \"goldenHourEnd\",\"solarNoon\",\"goldenHour\",\"sunsetStart\",\n                   \"sunset\",\"dusk\",\"nauticalDusk\",\"night\",\"nightEnd\"]\n\nfunction findDevice(devices, devId){\n  for (let d in devices) {\n    if (devices[d].id==devId) return [d, devices[d].name]\n  }\n  return ''\n}\n\n// Get saved data\nlet devices = flow.get('devices');\nlet schedule = flow.get('schedule');\nlet dev = flow.get('device');\nlet devId = devices[dev].id-1;\n\nlet now = new Date();\nlet day = Number.isInteger(flow.get('day'))?flow.get('day'):now.getDay();\nlet selector = Number.isInteger(flow.get('selector'))?flow.get('selector'):now.getHours();\nlet hour = selector<24?(day*24)+selector:0;    // Get index into schedule\nlet action = schedule[devId][hour];\n\nlet sunon = schedule[devId][169]==-1?sunevents.indexOf('dusk')-1:schedule[devId][169];\nlet sunoff = schedule[devId][170]==-1?sunevents.indexOf('dawn')-1:schedule[devId][170];\n\nlet dLen = Object.keys(devices).length;\nlet sLen = sunevents.length;\nlet aLen = Actions.length;\n\n// Handle requested action\nlet payload = msg.payload\nif (typeof payload === 'undefined') return\n\nmsg={}\nswitch (payload) {\n  case '':\n    if (debug) node.log('Refresh page')\n    flow.set('day',day)\n    flow.set('selector',selector )\n    msg.redraw = true\n    break\n  case \"u\":\n    if ((selector < 24)) {\n      schedule[devId][hour] = (action+1)%aLen;        // Next Hour action \n      //msg.status = Actions[schedule[devId][hour]];\n    } else if (selector == 24) {\n      devId = (devId+1)%dLen;                         // Next Device\n      node.log('Next device: '+devId)\n      //msg.status = \"Next Device\"; \n    } else if (selector == 25) {\n      day = (day+1)%7;                                // Next Day\n      //msg.status = \"Next Day\"; \n    } else if (selector == 26) {\n      schedule[devId][169] = (sunon+1)%sLen;          // Next Sun ON Eevent\n      //msg.status = \"Next Sun Event\"; \n    } else if (selector == 27) {\n      schedule[devId][170] = (sunoff+1)%sLen;         // Next SUn OFF Event\n      //msg.status = \"Next Sun Event\";\n    }\n    break;\n  case \"d\":\n    if (selector < 24) {\n      schedule[devId][hour] = ((action-1)+aLen)%aLen; // Previous Hour action\n      //msg.status = Actions[schedule[devId][hour]];\n    } else if (selector == 24) {\n      devId = ((devId-1)+dLen)%dLen;                  // Previous Device\n      //msg.status = \"Previous Device\";\n    } else if (selector == 25) { \n      day = ((day-1)+7)%7;                            // Previous day\n      //msg.status = \"Previous day\"; \n    } else if (selector == 26) {\n      schedule[devId][169] = ((sunon-1)+sLen)%sLen;   // Previous Sun On Event\n      //msg.status = \"Previous Sun On Event\"; \n    } else if (selector == 27) {\n      schedule[devId][170] = ((sunoff-1)+sLen)%sLen;  // Previous Sun Off Event\n      //msg.status = \"Previous Sun Off Event\";\n    }\n    break;\n  case 'c':\n    //node.log('Selector: '+selector)\n    if (selector < 24) {                            // Copy action to next hour\n      schedule[devId][(hour+1)%168] = schedule[devId][hour];\n      selector = (selector+1)%24;                   // Update selector        \n      if (!selector) day = (day+1)%7                // Update day if roillover \n      msg.status = \"Action copied to the next hour\";\n    } else if (selector == 25) {                    // Copy schedule to next day\n      for (let a = 0; a < 24; a++)\n        schedule[devId][((day+1)%7)*24+a] = schedule[devId][(day*24)+a];\n      day = (day + 1)%7;                           // Next day\n      msg.status = \"Schedule copied to\" + Days[day];\n    } else {\n      msg.status=\"Action not implemented\";\n    }\n    break;\n  case 's':\n    msg.payload = JSON.stringify(schedule);\n    node.send([null, msg, null]);                 // Save and continue\n    msg.payload = '';\n    msg.status = \"Saved Settings\";\n    break;\n  case 'q':\n    msg.payload = '';\n    msg.status = \"Changes canceled\";\n    return [null, null, msg];                     // Read old schedule\n  default:\n    //node.log('default: '+payload+' '+parseInt(payload))\n    selector = parseInt(payload);\n    flow.set('selector', selector)\n    if (selector < 24) {\n      msg.status = \"Changing Hour \" + selector;\n    } else {\n      msg.status = 'Changing ' + selected[selector-24];\n    }\n}\n\n// Save data if there was a payload\ndev = findDevice(devices,devId+1);\nif (['u','d','c'].indexOf(payload)>-1) {\n  node.warn('Saving data')\n  flow.set('schedule', schedule);\n  flow.set('device',dev[0]);\n  flow.set('day', day);\n  flow.set('selector', selector)\n}\n\n// Send data to GUI\nmsg.schedule = schedule[devId];                 // Just the current devices data\nmsg.day = Days[day]; //\nmsg.device = dev[1];\nmsg.selector = selector;\n\nif (debug) node.log('sending msg')\nif (debug) node.log('msg: '+JSON.stringify(msg))\n\nreturn [msg, null, null];","outputs":"3","noerr":0,"x":420,"y":1063,"wires":[["ce23084c.da8808"],["9633e588.20d428"],["fc27dc25.80c6c"]],"inputLabels":["update request"],"outputLabels":["Update page","Backup schedule","Restore schedule"]}]
